movies <- c("10 Things I Hate About You", "Guardians of the Galaxy", "Kingsman", "Moana",
"High School Musical", "Frozen")
top.three <- movies[c(1,3)]
top.three
top.three <- movies[c(1:3)]
top.three
excited <- paste(top.three, "is a great movie!", sep=" ")
excited
without.four <- movies[c(1:3), c(5,6)]
without.four <- c(movies[c(1:3)], movies(c(5,6)))
without.four <- c(top.three, movies[c(5,6)])
without.four
numbers <- c(700:999)
len <- length(numbers)
numbers.mean <- mean(numbers)
numbers.median <- median(numbers)
lower.numbers <- c(500:699)
all.numbers <- c(lower.numbers, numbers)
today <- as.Date(Sys.Date)
??Sys.Date
today <- as.Date(Sys.Date())
??as.Date()
summer.break <- as>Date(2017/06/09)
summer.break <- as>Date(2017-06-09)
summer.break <- as.Date(2017-06-09)
summer.break <- as.Date('2017-06-09')
days.to.break <- summer.break - today
days.to.break
MakeBirthdayIntro <- function(name, age, bday) {
intro.p1 <- MakeIntroduction(name, age)
bday.date <- as.Date(bday)
days.to.bday <- today - bday.date
#  intro.p2 <-
}
MakeBirthdayIntro <- function(name, age, bday) {
intro.p1 <- MakeIntroduction(name, age)
bday.date <- as.Date(bday)
days.to.bday <- today - bday.date
paste(days.to.bday)
#  intro.p2 <- paste("In", days.to.bday, "days")
}
MakeBirthdayIntro(my.name, my.age, '08-14-1997')
MakeBirthdayIntro(my.name, my.age, '1997-08-14')
MakeBirthdayIntro(my.name, my.age, '08-14')
MakeBirthdayIntro(my.name, my.age, '2017-08-14')
MakeBirthdayIntro <- function(name, age, bday) {
intro.p1 <- MakeIntroduction(name, age)
bday.date <- as.Date(bday)
days.to.bday <- bday.date - today
paste(days.to.bday)
#  intro.p2 <- paste("In", days.to.bday, "days")
}
intro.p2 <- paste("In", days.to.bday, "days I'll be", (age + 1), sep=" ")
MakeBirthdayIntro <- function(name, age, bday) {
intro.p1 <- MakeIntroduction(name, age)
bday.date <- as.Date(bday)
days.to.bday <- bday.date - today
#  paste(days.to.bday)
intro.p2 <- paste("In", days.to.bday, "days I'll be", (age + 1), sep=" ")
}
MakeBirthdayIntro <- function(name, age, bday) {
intro.p1 <- MakeIntroduction(name, age)
bday.date <- as.Date(bday)
days.to.bday <- bday.date - today
#  paste(days.to.bday)
intro.p2 <- paste("In", days.to.bday, "days I'll be", (age + 1), sep=" ")
paste(intro.p2)
}
MakeBirthdayIntro(my.name, my.age, '2017-08-14')
MakeBirthdayIntro <- function(name, age, bday) {
intro.p1 <- MakeIntroduction(name, age)
bday.date <- as.Date(bday)
days.to.bday <- bday.date - today
intro.p2 <- paste("In", days.to.bday, "days I'll be", (age + 1), sep=" ")
return (paste(intro.p1, intro.p2, sep=" "))
}
MakeBirthdayIntro(my.name, my.age, '2017-08-14')
MakeBirthdayIntro <- function(name, age, bday) {
intro.p1 <- paste((MakeIntroduction(name, age), ".", sep="")
bday.date <- as.Date(bday)
days.to.bday <- bday.date - today
intro.p2 <- paste("In", days.to.bday, "days I'll be", (age + 1), sep=" ")
return (paste(intro.p1, intro.p2, sep=" "))
}
MakeBirthdayIntro <- function(name, age, bday) {
intro.p1 <- MakeIntroduction(name, age)
bday.date <- as.Date(bday)
days.to.bday <- bday.date - today
intro.p2 <- paste(". In", days.to.bday, "days I'll be", (age + 1), sep=" ")
return (paste(intro.p1, intro.p2, sep=" "))
}
MakeBirthdayIntro(my.name, my.age, '1997-08-14')
MakeBirthdayIntro <- function(name, age, bday) {
intro.p1 <- MakeIntroduction(name, age)
bday.date <- as.Date(bday)
days.to.bday <- bday.date - today
intro.p2 <- paste(". In", days.to.bday, "days I'll be", (age + 1), sep=" ")
return (paste(intro.p1, intro.p2, sep=""))
}
MakeBirthdayIntro(my.name, my.age, '2017-08-14')
my.bday.intro <- MakeBirthdayIntro(my.name, my.age, '2017-08-14')
MakeIntroduction <- function(name, age) {
n <- paste(name, ",", sep="")
intro <- paste("Hello, my name is", n, "and I'm", age, "years old")#, sep=" ")
return (intro)
}
MakeIntroduction('Andrea', 19)
MakeIntroduction <- function(name, age) {
n <- paste(name, ",", sep="")
intro <- paste("Hello, my name is", n, "and I'm", age, "years old", sep=" ")
return (intro)
}
MakeIntroduction('Andrea', 19)
rm(list=ls(all=TRUE))
# a2-foundational-skills
# Set up and Defining variables -----------------------------------------------------------------
# Install and load the the `stringr` package, which has a variety of built in functions that make working with string variables easier.
install.packages("stringr")
library(stringr)
# Create a numeric variable `my.age` that is equal to your age
my.age <- 19
# Create a variable `my.name` that is equal to your first name
my.name <- 'Andrea'
# Using multiplication, create a variable `minutes.in.a.day` that is equal to the number of minutes in a day
minutes.in.a.day <- 24 * 60
# Using multiplication, create a variable `hours.in.a.year` that is the number of hours in a year
hours.in.a.year <- 365 * 24
# Create a variable `more.minutes.than.hours` that is a boolean value (TRUE/FALSE)
# It should be TRUE if there are more minutes in a day than hours in a year, otherwise FALSE
more.minutes.than.hours <- minutes.in.a.day > hours.in.a.year
# Working with functions ----------------------------------------------------------
# Write a function called `MakeIntroduction` that takes in two arguments: name, and age.
# This function should return a string value that says "Hello, my name is {name}, and I'm {age} years old".
MakeIntroduction <- function(name, age) {
n <- paste(name, ",", sep="")
intro <- paste("Hello, my name is", n, "and I'm", age, "years old", sep=" ")
return (intro)
}
# Create a variable `my.intro` by passing your variables `my.name` and `my.age` into your `MakeIntroduction` function
my.intro <- MakeIntroduction(my.name, my.age)
# Create a variable `casual.intro` by substituting "Hello, my name is ", with "Hey, I'm" in your `my.intro` variable
casual.intro <- gsub("Hello, my name is", "Hey, I'm", my.intro)
# Create a new variable `loud.intro`, which is your `my.intro` variable in all upper-case letters
loud.intro <- toupper(my.intro)
# Create a new variable `quiet.intro`, which is your `my.intro` variable in all lower-case letters
quiet.intro <- tolower(my.intro)
# Create a new variable capitalized, which is your `my.intro` variable with each word capitalized
# hint: use the stringr function `str_to_title`
capitalized <- str_to_title(my.intro)
# Using the `str_count` function, create a variable `occurrences` that stores the # of times the letter "e" appears in `my.intro`
occurences <- str_count(my.intro, pattern="e")
# Write another function `Double` that takes in a variable and returns that variable times two
Double <- function(input) {
return (input * 2)
}
# Using your `Double` function, create a variable `minutes.in.two.days`, which is the number of minutes in two days
minutes.in.two.days <- Double(minutes.in.a.day)
# Write another function `ThirdPower` that takes in a value and returns that value cubed
ThirdPower <- function(input) {
return (input ^ 3)
}
# Create a variable `twenty.seven`` by passing the number 3 to your `ThirdPower` function
twenty.seven <- ThirdPower(3)
# Vectors ----------------------------------------------------------------------
# Create a vector `movies` that contains the names of six movies you like
movies <- c("10 Things I Hate About You", "Guardians of the Galaxy", "Kingsman", "Moana",
"High School Musical", "Frozen")
# Create a vector `top.three` that only contains the first three movies in the vector
top.three <- movies[c(1:3)]
# Using your vector and the paste method, create a vector `excited` that adds the phrase -
# " is a great movie!" to the end of each element in your movies vector
excited <- paste(top.three, "is a great movie!", sep=" ")
# Create a vector `without.four` that has your first three movies, and your 5th and 6th movies.
without.four <- c(top.three, movies[c(5,6)])
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- c(700:999)
# Using the built in length function, create a variable `len` that is equal to the length of your vector `numbers`
len <- length(numbers)
# Using the `mean` function, create a variable `numbers.mean` that is the mean of your vector `numbers`
numbers.mean <- mean(numbers)
# Using the `median` function, create a variable `numbers.median` that is the mean of your vector `numbers`
numbers.median <- median(numbers)
# Create a vector `lower.numbers` that is the numbers 500:699
lower.numbers <- c(500:699)
# Create a vector `all.numbers` that combines your `lower.numbers` and `numbers` vectors
all.numbers <- c(lower.numbers, numbers)
# Dates ----------------------------------------------------------------------------
# Use the `as.Date()` function to create a variable `today` that represents today's date
# You can pass in a character string of the day you wrote this, or you can get the current date
# Hint: https://www.rdocumentation.org/packages/base/versions/3.3.2/topics/Sys.time
today <- as.Date(Sys.Date())
# Create a variable `summer.break` that represents the first day of Summer break (June 9, 2017).
# Make sure to use the `as.Date` function again
summer.break <- as.Date('2017-06-09')
# Create a variable `days.to.break` that is how many days until break (hint: subtract the dates!)
days.to.break <- summer.break - today
# Define a function called `MakeBirthdayIntro` that takes in three arguments:
# a name, an age, and a character string for an upcoming birthday.
# This method should return a character string of the format:
#  "Hello, my name is {name} and I'm {age} years old. In {N} days I'll be {new.age}"
# You should utilize your `MakeIntroduction()` function from Part 1!
MakeBirthdayIntro <- function(name, age, bday) {
intro.p1 <- MakeIntroduction(name, age)
bday.date <- as.Date(bday)
days.to.bday <- bday.date - today
intro.p2 <- paste(". In", days.to.bday, "days I'll be", (age + 1), sep=" ")
return (paste(intro.p1, intro.p2, sep=""))
}
# Create a variable `my.bday.intro` by calling your `MakeBirthdayIntro` function and passing in `my.name`, `my.age`, and your birthday.
my.bday.intro <- MakeBirthdayIntro(my.name, my.age, '2017-08-14')
# Challenge ------------------------------------------------------------------
# Write a function `RemoveDigits` that will remove all digits (i.e., 0 through 9) from all elements in a *vector of strings*.
# Demonstrate that your approach is successful by passing a vector of courses to your function
# For example, RemoveDigits(c("INFO 201", "CSE 142"))
top.three
excited
without.four
numbers
len
numbers.mean
numbers.median
all.numbers
today
summer.break
days.to.break
my.bday.intro
MakeBirthdayIntro <- function(name, age, bday) {
#  intro.p1 <- MakeIntroduction(name, age)
bday.date <- as.Date(bday)
days.to.bday <- bday.date - today
intro.p2 <- paste(". In", days.to.bday, "days I'll be", (age + 1), sep=" ")
return (paste(MakeIntroduction(name, age), intro.p2, sep=""))
}
# Create a variable `my.bday.intro` by calling your `MakeBirthdayIntro` function and passing in `my.name`, `my.age`, and your birthday.
my.bday.intro <- MakeBirthdayIntro(my.name, my.age, '2017-08-14')
my.bday.intro
RemoveDigits <- function(v1) {
gsub('[0-9]+','',v1)
}
RemoveDigits(c("INFO 201", "CSE 142"))
RemoveDigits(c("MUSIC 120", "CSE 311", "INFO 201"))
rm(list=ls(all=TRUE))
# a2-foundational-skills
# Set up and Defining variables -----------------------------------------------------------------
# Install and load the the `stringr` package, which has a variety of built in functions that make working with string variables easier.
install.packages("stringr")
library(stringr)
# Create a numeric variable `my.age` that is equal to your age
my.age <- 19
# Create a variable `my.name` that is equal to your first name
my.name <- 'Andrea'
# Using multiplication, create a variable `minutes.in.a.day` that is equal to the number of minutes in a day
minutes.in.a.day <- 24 * 60
# Using multiplication, create a variable `hours.in.a.year` that is the number of hours in a year
hours.in.a.year <- 365 * 24
# Create a variable `more.minutes.than.hours` that is a boolean value (TRUE/FALSE)
# It should be TRUE if there are more minutes in a day than hours in a year, otherwise FALSE
more.minutes.than.hours <- minutes.in.a.day > hours.in.a.year
# Working with functions ----------------------------------------------------------
# Write a function called `MakeIntroduction` that takes in two arguments: name, and age.
# This function should return a string value that says "Hello, my name is {name}, and I'm {age} years old".
MakeIntroduction <- function(name, age) {
n <- paste(name, ",", sep="")
intro <- paste("Hello, my name is", n, "and I'm", age, "years old", sep=" ")
return (intro)
}
# Create a variable `my.intro` by passing your variables `my.name` and `my.age` into your `MakeIntroduction` function
my.intro <- MakeIntroduction(my.name, my.age)
# Create a variable `casual.intro` by substituting "Hello, my name is ", with "Hey, I'm" in your `my.intro` variable
casual.intro <- gsub("Hello, my name is", "Hey, I'm", my.intro)
# Create a new variable `loud.intro`, which is your `my.intro` variable in all upper-case letters
loud.intro <- toupper(my.intro)
# Create a new variable `quiet.intro`, which is your `my.intro` variable in all lower-case letters
quiet.intro <- tolower(my.intro)
# Create a new variable capitalized, which is your `my.intro` variable with each word capitalized
# hint: use the stringr function `str_to_title`
capitalized <- str_to_title(my.intro)
# Using the `str_count` function, create a variable `occurrences` that stores the # of times the letter "e" appears in `my.intro`
occurrences <- str_count(my.intro, pattern="e")
# Write another function `Double` that takes in a variable and returns that variable times two
Double <- function(input) {
return (input * 2)
}
# Using your `Double` function, create a variable `minutes.in.two.days`, which is the number of minutes in two days
minutes.in.two.days <- Double(minutes.in.a.day)
# Write another function `ThirdPower` that takes in a value and returns that value cubed
ThirdPower <- function(input) {
return (input ^ 3)
}
# Create a variable `twenty.seven`` by passing the number 3 to your `ThirdPower` function
twenty.seven <- ThirdPower(3)
# Vectors ----------------------------------------------------------------------
# Create a vector `movies` that contains the names of six movies you like
movies <- c("10 Things I Hate About You", "Guardians of the Galaxy", "Kingsman", "Moana",
"High School Musical", "Frozen")
# Create a vector `top.three` that only contains the first three movies in the vector
top.three <- movies[c(1:3)]
# Using your vector and the paste method, create a vector `excited` that adds the phrase -
# " is a great movie!" to the end of each element in your movies vector
excited <- paste(top.three, "is a great movie!", sep=" ")
# Create a vector `without.four` that has your first three movies, and your 5th and 6th movies.
without.four <- c(top.three, movies[c(5,6)])
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- c(700:999)
# Using the built in length function, create a variable `len` that is equal to the length of your vector `numbers`
len <- length(numbers)
# Using the `mean` function, create a variable `numbers.mean` that is the mean of your vector `numbers`
numbers.mean <- mean(numbers)
# Using the `median` function, create a variable `numbers.median` that is the mean of your vector `numbers`
numbers.median <- median(numbers)
# Create a vector `lower.numbers` that is the numbers 500:699
lower.numbers <- c(500:699)
# Create a vector `all.numbers` that combines your `lower.numbers` and `numbers` vectors
all.numbers <- c(lower.numbers, numbers)
# Dates ----------------------------------------------------------------------------
# Use the `as.Date()` function to create a variable `today` that represents today's date
# You can pass in a character string of the day you wrote this, or you can get the current date
# Hint: https://www.rdocumentation.org/packages/base/versions/3.3.2/topics/Sys.time
today <- as.Date(Sys.Date())
# Create a variable `summer.break` that represents the first day of Summer break (June 9, 2017).
# Make sure to use the `as.Date` function again
summer.break <- as.Date('2017-06-09')
# Create a variable `days.to.break` that is how many days until break (hint: subtract the dates!)
days.to.break <- summer.break - today
# Define a function called `MakeBirthdayIntro` that takes in three arguments:
# a name, an age, and a character string for an upcoming birthday.
# This method should return a character string of the format:
#  "Hello, my name is {name} and I'm {age} years old. In {N} days I'll be {new.age}"
# You should utilize your `MakeIntroduction()` function from Part 1!
MakeBirthdayIntro <- function(name, age, bday) {
bday.date <- as.Date(bday)
days.to.bday <- bday.date - today
intro.p2 <- paste(". In", days.to.bday, "days I'll be", (age + 1), sep=" ")
return (paste(MakeIntroduction(name, age), intro.p2, sep=""))
}
# Create a variable `my.bday.intro` by calling your `MakeBirthdayIntro` function and passing in `my.name`, `my.age`, and your birthday.
my.bday.intro <- MakeBirthdayIntro(my.name, my.age, '2017-08-14')
# Challenge ------------------------------------------------------------------
# Write a function `RemoveDigits` that will remove all digits (i.e., 0 through 9) from all elements in a *vector of strings*.
RemoveDigits <- function(v1) {
gsub('[0-9]+','',v1)
}
# Demonstrate that your approach is successful by passing a vector of courses to your function
# For example, RemoveDigits(c("INFO 201", "CSE 142"))
RemoveDigits(c("MUSIC 120", "CSE 311", "INFO 201"))
rm(list=ls())
library(jsonlite)
library(dplyr)
library(httr)
library(knitr)
base <- 'https://congress.api.sunlightfoundation.com'
resource <- "/districts/locate?"
search.query <- 'zip=98026'
uri.full <- paste0(base, resource, search.query)
request <- GET(uri.full)
request.content <- content(request, 'text')
district.data <- fromJSON(request.content) %>% as.data.frame()
resource <- '/legislators/locate?'
uri.full <- paste0(base, resource, search.query)
leg.request <- GET(uri.full)
leg.req.content <- content(leg.request, 'text')
leg.data <- fromJSON(leg.req.content) %>% as.data.frame()
test <- leg.data %>%
mutate(md.site = paste0('[link](', results.website, ')'),
twitter.site = paste0('[link](https://twitter.com/', results.twitter_id,')'))
leg.data.filt <- test %>%
select(results.first_name, results.last_name,
results.title, results.party, results.chamber,
results.phone, md.site, twitter.site)
kable(leg.data.filt, format = 'markdown', col.names =
c('First Name', 'Last Name', 'Title', 'Party', 'Chamber', 'Phone', 'Website', 'Twitter'))
test.request <- GET('https://congress.api.sunlightfoundation.com/committees?member_ids=L000551')
test.req.data <- content(test.request, 'text') %>%  fromJSON() %>% as.data.frame()
RetrieveCommittees <- function(rep.ID) {
resource <- '/committees?'
search.query <- paste0('member_ids=', rep.ID)
uri.full <- paste0(base, resource, search.query)
com.request <- GET(uri.full)
com.req.content <- content(com.request, 'text')
com.data <- com.req.content %>% fromJSON() %>% as.data.frame() %>% mutate(results.bioguide_id =  rep.ID)
return (com.data)
}
test.com <- lapply(test$results.bioguide_id, RetrieveCommittees) %>% bind_rows()
test.total <- left_join(test, test.com, by = 'results.bioguide_id') %>% arrange(count.y)
par(las = 1)
counts <- table(test.total$count.y)
names <- test.total %>% mutate(full.name = paste0(test.total$results.first_name, ' ', test.total$results.last_name)) %>%
select(full.name) %>% distinct()
barplot(counts, main = 'Committees Served on by Each Rep.', horiz = TRUE, names.arg = names[['full.name']],
xlab = '# Committees')
resource <- '/committees?'
View(test.total)
View(test.total)
committee.selection <- test.total %>% filter(results.subcommittee == TRUE)
View(committee.selection)
committee.selection <- test.total %>% filter(results.subcommittee == FALSE)
%>% select(results.first_name, results.last_name, results.name, results.committee_id)
committee.selection <- test.total %>% filter(results.subcommittee == FALSE) %>%
select(results.first_name, results.last_name, results.name, results.committee_id)
View(committee.selection)
committee.selection <- test.total %>% filter(results.subcommittee == FALSE) %>%
select(results.first_name, results.last_name, results.name, results.committee_id) %>%
filter([1,])
committee.selection <- test.total %>% filter(results.subcommittee == FALSE) %>%
select(results.first_name, results.last_name, results.name, results.committee_id) %>%
filter(row_number() == 1)
search.query <- list(fields = 'members')
uri.full <- paste0(base, resource, search.query)
uri.full
??names
uri.full <- paste0(base, resource, search.query, query = fields)
fields <- list(fields = 'members')
uri.full <- paste0(base, resource, search.query, query = fields)
uri.full
search.query <- paste0('committee_id=', committee.selection$results.committee_id)
uri.full <- paste0(base, resource, search.query, query = fields)
uri.full
fields <- list(committee_id = committee.selection$results.committee_id, fields = 'members')
uri.full <- paste0(base, resource, query = fields)
uri.full
uri.full <- paste0(base, resource, search.query, fields)
uri.full
uri.full <- paste0(base, resource, search.query, fields)
uri.full
fields <- '&fields=members'
uri.full <- paste0(base, resource, search.query, fields)
uri.full
search.query <- paste0('committee_id=', committee.selection$results.committee_id, '&per_page=all')
fields <- '&fields=members'
uri.full <- paste0(base, resource, search.query, fields)
uri.full
query.params <- list(committee_id = committee.selection$results.committee_id, fields = 'members',
per_page = 'all')
in.depth.comm <- GET(uri.full, query = query.params)
in.depth.comm <- GET(uri.full, query = query.params) %>% content('text') %>% fromJSON() %>% as.data.frame()
in.depth.comm <- GET(uri.full, query = query.params) %>% content('text')
in.depth.comm <- GET(uri.full, query = query.params) %>% content('text')
in.depth.comm.data <- in.depth.comm %>% fromJSON() %>% as.data.frame()
in.depth.comm.data <- in.depth.comm %>% fromJSON()
in.depth.comm.data <- fromJSON(in.depth.comm(res,"text"))$results$members[[1]] %>% flatten()
in.depth.comm <- GET(uri.full, query = query.params)
in.depth.comm.data <- fromJSON(content(in.depth.comm, "text"))$results$members[[1]] %>% flatten()
View(in.depth.comm.data)
chair <- in.depth.comm.data %>% filter(title == 'Chair') %>% select(legislator.first_name, legislator.last_name)
View(chair)
View(chair)
num.comm.members <- nrow(in.depth.comm.data)
View(committee.selection)
View(committee.selection)
comm.selection.side <- in.depth.comm.data %>% filter(legislator.first_name == committee.selection$results.first_name) %>%
%>% select(side)
comm.selection.side <- in.depth.comm.data %>% filter(legislator.first_name == committee.selection$results.first_name) %>%
select(side)
View(comm.selection.side)
comm.leg.male <- in.depth.comm.data %>% select(legislator.gender) %>% filter(legislator.gender == 'M')
View(comm.leg.male)
comm.leg.male <- in.depth.comm.data %>% filter(legislator.gender == 'M')
comm.leg.fem <- in.depth.comm.data %>% filter(legislator.gender == 'F')
num.leg.male <- in.depth.comm.data %>% filter(legislator.gender == 'M')
num.leg.fem <- in.depth.comm.data %>% filter(legislator.gender == 'F')
rm(comm.leg.fem)
rm(comm.leg.male)
num.leg.male <- in.depth.comm.data %>% filter(legislator.gender == 'M')
num.leg.fem <- in.depth.comm.data %>% filter(legislator.gender == 'F')
percent.leg.male <- nrow(num.leg.male) / nrow(in.depth.comm.data) * 100
percent.leg.fem <- nrow(num.leg.fem) / nrow(in.depth.comm.data) * 100
View(test.total)
View(chair)
View(test.com)
View(district.data)
View(leg.data)
View(leg.data)
base <- 'https://congress.api.sunlightfoundation.com'
resource <- "/districts/locate?"
search.query <- 'zip=98112'
uri.full <- paste0(base, resource, search.query)
request <- GET(uri.full)
request.content <- content(request, 'text')
district.data <- fromJSON(request.content) %>% as.data.frame()
resource <- '/legislators/locate?'
uri.full <- paste0(base, resource, search.query)
leg.request <- GET(uri.full)
leg.req.content <- content(leg.request, 'text')
leg.data <- fromJSON(leg.req.content) %>% as.data.frame()
View(leg.data.filt)
View(leg.data)
zip.code <- round(search.query[[1]], digits = 0)
dataset <- read.csv('./data/intro-survey.csv', stringsAsFactors = FALSE)
dataset <- read.csv('/data/intro-survey.csv', stringsAsFactors = FALSE)
dataset <- read.csv('~/Documents/2016-2017/Sp-17/INFO-201A/a7-collaboration-git-r-done/
data/intro-survey.csv', stringsAsFactors = FALSE)
shiny::runApp('Documents/2016-2017/S'17/INFO 201A/a8-building-apps-ljandrea')
shiny::runApp('Documents/2016-2017/S'17/INFO 201A/a8-building-apps-ljandrea')
shiny::runApp('Documents/2016-2017/S'17/INFO 201A/a8-building-apps-ljandrea')
shiny::runApp('Documents/2016-2017/S'17/INFO 201A/a8-building-apps-ljandrea')
shiny::runApp('Documents/2016-2017/S'17/INFO 201A/a8-building-apps-ljandrea')
shiny::runApp('Documents/2016-2017/S'17/INFO 201A/a8-building-apps-ljandrea')
shiny::runApp('Documents/2016-2017/S'17/INFO 201A/a8-building-apps-ljandrea')
shiny::runApp('Documents/2016-2017/S'17/INFO 201A/a8-building-apps-ljandrea')
shiny::runApp('Documents/2016-2017/S'17/INFO 201A/a8-building-apps-ljandrea')
rm(list=ls())
setwd("~/Documents/2016-2017/S'17/INFO 201A/info-201-git-R-done")
shiny::runApp()
runApp()
runApp()
runApp()
setwd("~/Documents/2016-2017/S'17/INFO 201A/final-project/final-project-test")
runApp()
runApp('~/Documents/2016-2017/S'17/INFO 201A/info-201-git-R-done')
setwd("~/Documents/2016-2017/S'17/INFO 201A/info-201-git-R-done")
runApp()
runApp()
