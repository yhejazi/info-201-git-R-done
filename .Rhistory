select(results.first_name, results.last_name, results.name, results.committee_id)
View(committee.selection)
committee.selection <- test.total %>% filter(results.subcommittee == FALSE) %>%
select(results.first_name, results.last_name, results.name, results.committee_id) %>%
filter([1,])
committee.selection <- test.total %>% filter(results.subcommittee == FALSE) %>%
select(results.first_name, results.last_name, results.name, results.committee_id) %>%
filter(row_number() == 1)
search.query <- list(fields = 'members')
uri.full <- paste0(base, resource, search.query)
uri.full
??names
uri.full <- paste0(base, resource, search.query, query = fields)
fields <- list(fields = 'members')
uri.full <- paste0(base, resource, search.query, query = fields)
uri.full
search.query <- paste0('committee_id=', committee.selection$results.committee_id)
uri.full <- paste0(base, resource, search.query, query = fields)
uri.full
fields <- list(committee_id = committee.selection$results.committee_id, fields = 'members')
uri.full <- paste0(base, resource, query = fields)
uri.full
uri.full <- paste0(base, resource, search.query, fields)
uri.full
uri.full <- paste0(base, resource, search.query, fields)
uri.full
fields <- '&fields=members'
uri.full <- paste0(base, resource, search.query, fields)
uri.full
search.query <- paste0('committee_id=', committee.selection$results.committee_id, '&per_page=all')
fields <- '&fields=members'
uri.full <- paste0(base, resource, search.query, fields)
uri.full
query.params <- list(committee_id = committee.selection$results.committee_id, fields = 'members',
per_page = 'all')
in.depth.comm <- GET(uri.full, query = query.params)
in.depth.comm <- GET(uri.full, query = query.params) %>% content('text') %>% fromJSON() %>% as.data.frame()
in.depth.comm <- GET(uri.full, query = query.params) %>% content('text')
in.depth.comm <- GET(uri.full, query = query.params) %>% content('text')
in.depth.comm.data <- in.depth.comm %>% fromJSON() %>% as.data.frame()
in.depth.comm.data <- in.depth.comm %>% fromJSON()
in.depth.comm.data <- fromJSON(in.depth.comm(res,"text"))$results$members[[1]] %>% flatten()
in.depth.comm <- GET(uri.full, query = query.params)
in.depth.comm.data <- fromJSON(content(in.depth.comm, "text"))$results$members[[1]] %>% flatten()
View(in.depth.comm.data)
chair <- in.depth.comm.data %>% filter(title == 'Chair') %>% select(legislator.first_name, legislator.last_name)
View(chair)
View(chair)
num.comm.members <- nrow(in.depth.comm.data)
View(committee.selection)
View(committee.selection)
comm.selection.side <- in.depth.comm.data %>% filter(legislator.first_name == committee.selection$results.first_name) %>%
%>% select(side)
comm.selection.side <- in.depth.comm.data %>% filter(legislator.first_name == committee.selection$results.first_name) %>%
select(side)
View(comm.selection.side)
comm.leg.male <- in.depth.comm.data %>% select(legislator.gender) %>% filter(legislator.gender == 'M')
View(comm.leg.male)
comm.leg.male <- in.depth.comm.data %>% filter(legislator.gender == 'M')
comm.leg.fem <- in.depth.comm.data %>% filter(legislator.gender == 'F')
num.leg.male <- in.depth.comm.data %>% filter(legislator.gender == 'M')
num.leg.fem <- in.depth.comm.data %>% filter(legislator.gender == 'F')
rm(comm.leg.fem)
rm(comm.leg.male)
num.leg.male <- in.depth.comm.data %>% filter(legislator.gender == 'M')
num.leg.fem <- in.depth.comm.data %>% filter(legislator.gender == 'F')
percent.leg.male <- nrow(num.leg.male) / nrow(in.depth.comm.data) * 100
percent.leg.fem <- nrow(num.leg.fem) / nrow(in.depth.comm.data) * 100
View(test.total)
View(chair)
View(test.com)
View(district.data)
View(leg.data)
View(leg.data)
base <- 'https://congress.api.sunlightfoundation.com'
resource <- "/districts/locate?"
search.query <- 'zip=98112'
uri.full <- paste0(base, resource, search.query)
request <- GET(uri.full)
request.content <- content(request, 'text')
district.data <- fromJSON(request.content) %>% as.data.frame()
resource <- '/legislators/locate?'
uri.full <- paste0(base, resource, search.query)
leg.request <- GET(uri.full)
leg.req.content <- content(leg.request, 'text')
leg.data <- fromJSON(leg.req.content) %>% as.data.frame()
View(leg.data.filt)
View(leg.data)
zip.code <- round(search.query[[1]], digits = 0)
dataset <- read.csv('./data/intro-survey.csv', stringsAsFactors = FALSE)
dataset <- read.csv('/data/intro-survey.csv', stringsAsFactors = FALSE)
dataset <- read.csv('~/Documents/2016-2017/Sp-17/INFO-201A/a7-collaboration-git-r-done/
data/intro-survey.csv', stringsAsFactors = FALSE)
shiny::runApp('Documents/2016-2017/S'17/INFO 201A/a8-building-apps-ljandrea')
shiny::runApp('Documents/2016-2017/S'17/INFO 201A/a8-building-apps-ljandrea')
shiny::runApp('Documents/2016-2017/S'17/INFO 201A/a8-building-apps-ljandrea')
shiny::runApp('Documents/2016-2017/S'17/INFO 201A/a8-building-apps-ljandrea')
shiny::runApp('Documents/2016-2017/S'17/INFO 201A/a8-building-apps-ljandrea')
shiny::runApp('Documents/2016-2017/S'17/INFO 201A/a8-building-apps-ljandrea')
shiny::runApp('Documents/2016-2017/S'17/INFO 201A/a8-building-apps-ljandrea')
shiny::runApp('Documents/2016-2017/S'17/INFO 201A/a8-building-apps-ljandrea')
shiny::runApp('Documents/2016-2017/S'17/INFO 201A/a8-building-apps-ljandrea')
setwd("~/Documents/2016-2017/S'17/INFO 201A/info-201-git-R-done/scripts")
rm(list=ls())
library(httr)
library(purrr)
library(jsonlite)
library(dplyr)
library(plotly)
library(stringr)
MakeMap <- function(food.type.input) {
pop.city.US <- read.csv(file = 'most-pop-cities.csv', stringsAsFactors = FALSE)
state <- pop.city.US$states
AvgRating <- function(food.type, state) {
res <- POST("https://api.yelp.com/oauth2/token",
body = list(grant_type = "client_credentials",
client_id = "iXvoLjOm6wir50Rq0XrwZg",
client_secret =
"2jifA0p0BWQROgO6Kmarl9bBc6WFwLH3r8SP9fzFmbrHkq98suQRgAP3OoBduC4u"))
token <- httr::content(res)$access_token
yelp <- "https://api.yelp.com"
location <- state
limit <- 10
offset <- 0
categories <- food.type
(url <- modify_url(yelp, path = c("v3", "businesses", "search"),
query = list(location = location, categories = categories, limit = limit, offset = 0)))
res <- GET(url, add_headers('Authorization' = paste("bearer", token)))
response.content <- httr::content(res, "text", encoding = "UTF-8")
body.data <- fromJSON(response.content)
test <- is.data.frame(body.data$businesses)
results <- body.data$businesses
results.info <- results %>% select(name, rating)
results.name <- results.info$name
results.rating <- results.info$rating
total.results <- data.frame(results.name, results.rating, stringsAsFactors = FALSE)
mean.rating <- mean(results.rating)
output <- data.frame(state, mean.rating, stringsAsFactors = FALSE)
pop.city.US <- merge(pop.city.US, output, all = TRUE)
return (pop.city.US)
}
list.df.ratings <- lapply(state, AvgRating, food.type=food.type.input)
all.ratings <- reduce(list.df.ratings, full_join, by = c('most.pop.city','states', 'lat', 'long', 'mean.rating')) %>%
filter(!is.na(mean.rating))
geog <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5
)
map <- plot_geo(all.ratings, locationmode= 'USA-states',lat = ~lat, lon = ~long)  %>%
add_markers(
z = ~mean.rating, locations = ~states,
text = ~paste('Most populated city:', most.pop.city,
paste('Rating:', round(mean.rating, digits = 2)),
sep = '<br />'),
color = ~mean.rating,
hoverinfo = 'text'
) %>%
layout(
if (food.type.input == 'indpak') {
title.food <- 'Indian'
} else if (food.type.input == 'tradamerican') {
title.food <- 'American (Traditional)'
} else {
title.food <- food.type.input
}
title = paste0("Average Rating of ", str_to_title(title.food), " Restaurants in the U.S."),
geo = geog
)
return (map)
}
# don't work
# indian = 'indpak'
# american traditional = 'tradamerican'
# korean
# thai
# german
library(httr)
library(purrr)
library(jsonlite)
library(dplyr)
library(plotly)
library(stringr)
MakeMap <- function(food.type.input) {
pop.city.US <- read.csv(file = 'most-pop-cities.csv', stringsAsFactors = FALSE)
state <- pop.city.US$states
AvgRating <- function(food.type, state) {
res <- POST("https://api.yelp.com/oauth2/token",
body = list(grant_type = "client_credentials",
client_id = "iXvoLjOm6wir50Rq0XrwZg",
client_secret =
"2jifA0p0BWQROgO6Kmarl9bBc6WFwLH3r8SP9fzFmbrHkq98suQRgAP3OoBduC4u"))
token <- httr::content(res)$access_token
yelp <- "https://api.yelp.com"
location <- state
limit <- 10
offset <- 0
categories <- food.type
(url <- modify_url(yelp, path = c("v3", "businesses", "search"),
query = list(location = location, categories = categories, limit = limit, offset = 0)))
res <- GET(url, add_headers('Authorization' = paste("bearer", token)))
response.content <- httr::content(res, "text", encoding = "UTF-8")
body.data <- fromJSON(response.content)
test <- is.data.frame(body.data$businesses)
results <- body.data$businesses
results.info <- results %>% select(name, rating)
results.name <- results.info$name
results.rating <- results.info$rating
total.results <- data.frame(results.name, results.rating, stringsAsFactors = FALSE)
mean.rating <- mean(results.rating)
output <- data.frame(state, mean.rating, stringsAsFactors = FALSE)
pop.city.US <- merge(pop.city.US, output, all = TRUE)
return (pop.city.US)
}
list.df.ratings <- lapply(state, AvgRating, food.type=food.type.input)
all.ratings <- reduce(list.df.ratings, full_join, by = c('most.pop.city','states', 'lat', 'long', 'mean.rating')) %>%
filter(!is.na(mean.rating))
title.food <- food.type.input
if (food.type.input == 'indpak') {
title.food <- 'Indian'
} else if (food.type.input == 'tradamerican') {
title.food <- 'American (Traditional)'
}
geog <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5
)
map <- plot_geo(all.ratings, locationmode= 'USA-states',lat = ~lat, lon = ~long)  %>%
add_markers(
z = ~mean.rating, locations = ~states,
text = ~paste('Most populated city:', most.pop.city,
paste('Rating:', round(mean.rating, digits = 2)),
sep = '<br />'),
color = ~mean.rating,
hoverinfo = 'text'
) %>%
layout(
title = paste0("Average Rating of ", str_to_title(title.food), " Restaurants in the U.S."),
geo = geog
)
return (map)
}
# don't work
# indian = 'indpak'
# american traditional = 'tradamerican'
# korean
# thai
# german
chinese <- MakeMap('chinese')
chinese
library(httr)
library(purrr)
library(jsonlite)
library(dplyr)
library(plotly)
library(stringr)
MakeMap <- function(food.type.input) {
pop.city.US <- read.csv(file = 'most-pop-cities.csv', stringsAsFactors = FALSE)
most.pop.city <- pop.city.US$most.pop.city
AvgRating <- function(food.type, city) {
res <- POST("https://api.yelp.com/oauth2/token",
body = list(grant_type = "client_credentials",
client_id = "iXvoLjOm6wir50Rq0XrwZg",
client_secret =
"2jifA0p0BWQROgO6Kmarl9bBc6WFwLH3r8SP9fzFmbrHkq98suQRgAP3OoBduC4u"))
token <- httr::content(res)$access_token
yelp <- "https://api.yelp.com"
location <- city
limit <- 10
offset <- 0
categories <- food.type
(url <- modify_url(yelp, path = c("v3", "businesses", "search"),
query = list(location = location, categories = categories, limit = limit, offset = 0)))
res <- GET(url, add_headers('Authorization' = paste("bearer", token)))
response.content <- httr::content(res, "text", encoding = "UTF-8")
body.data <- fromJSON(response.content)
test <- is.data.frame(body.data$businesses)
results <- body.data$businesses
results.info <- results %>% select(name, rating)
results.name <- results.info$name
results.rating <- results.info$rating
total.results <- data.frame(results.name, results.rating, stringsAsFactors = FALSE)
mean.rating <- mean(results.rating)
output <- data.frame(state, mean.rating, stringsAsFactors = FALSE)
pop.city.US <- merge(pop.city.US, output, all = TRUE)
return (pop.city.US)
}
list.df.ratings <- lapply(most.pop.city, AvgRating, food.type=food.type.input)
all.ratings <- reduce(list.df.ratings, full_join, by = c('most.pop.city','states', 'lat', 'long', 'mean.rating')) %>%
filter(!is.na(mean.rating))
title.food <- food.type.input
if (food.type.input == 'indpak') {
title.food <- 'Indian'
} else if (food.type.input == 'tradamerican') {
title.food <- 'American (Traditional)'
}
geog <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5
)
map <- plot_geo(all.ratings, locationmode= 'USA-states',lat = ~lat, lon = ~long)  %>%
add_markers(
z = ~mean.rating, locations = ~states,
text = ~paste('Most populated city:', most.pop.city,
paste('Rating:', round(mean.rating, digits = 2)),
sep = '<br />'),
color = ~mean.rating,
hoverinfo = 'text'
) %>%
layout(
title = paste0("Average Rating of ", str_to_title(title.food), " Restaurants in the U.S."),
geo = geog
)
return (map)
}
# don't work
# indian = 'indpak'
# american traditional = 'tradamerican'
# korean
# thai
# german
chinese <- MakeMap('chinese')
library(httr)
library(purrr)
library(jsonlite)
library(dplyr)
library(plotly)
library(stringr)
MakeMap <- function(food.type.input) {
pop.city.US <- read.csv(file = 'most-pop-cities.csv', stringsAsFactors = FALSE)
most.pop.city <- pop.city.US$most.pop.city
AvgRating <- function(food.type, city) {
res <- POST("https://api.yelp.com/oauth2/token",
body = list(grant_type = "client_credentials",
client_id = "iXvoLjOm6wir50Rq0XrwZg",
client_secret =
"2jifA0p0BWQROgO6Kmarl9bBc6WFwLH3r8SP9fzFmbrHkq98suQRgAP3OoBduC4u"))
token <- httr::content(res)$access_token
yelp <- "https://api.yelp.com"
location <- city
limit <- 10
offset <- 0
categories <- food.type
(url <- modify_url(yelp, path = c("v3", "businesses", "search"),
query = list(location = location, categories = categories, limit = limit, offset = 0)))
res <- GET(url, add_headers('Authorization' = paste("bearer", token)))
response.content <- httr::content(res, "text", encoding = "UTF-8")
body.data <- fromJSON(response.content)
test <- is.data.frame(body.data$businesses)
results <- body.data$businesses
results.info <- results %>% select(name, rating)
results.name <- results.info$name
results.rating <- results.info$rating
total.results <- data.frame(results.name, results.rating, stringsAsFactors = FALSE)
most.pop.city <- city
mean.rating <- mean(results.rating)
output <- data.frame(most.pop.city, mean.rating, stringsAsFactors = FALSE)
pop.city.US <- merge(pop.city.US, output, all = TRUE)
return (pop.city.US)
}
list.df.ratings <- lapply(most.pop.city, AvgRating, food.type=food.type.input)
all.ratings <- reduce(list.df.ratings, full_join, by = c('most.pop.city','states', 'lat', 'long', 'mean.rating')) %>%
filter(!is.na(mean.rating))
title.food <- food.type.input
if (food.type.input == 'indpak') {
title.food <- 'Indian'
} else if (food.type.input == 'tradamerican') {
title.food <- 'American (Traditional)'
}
geog <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5
)
map <- plot_geo(all.ratings, locationmode= 'USA-states',lat = ~lat, lon = ~long)  %>%
add_markers(
z = ~mean.rating, locations = ~states,
text = ~paste('Most populated city:', most.pop.city,
paste('Rating:', round(mean.rating, digits = 2)),
sep = '<br />'),
color = ~mean.rating,
hoverinfo = 'text'
) %>%
layout(
title = paste0("Average Rating of ", str_to_title(title.food), " Restaurants in the U.S."),
geo = geog
)
return (map)
}
# don't work
# indian = 'indpak'
# american traditional = 'tradamerican'
# korean
# thai
# german
chinese <- MakeMap('chinese')
chinese
indian <- MakeMap('indpak')
indian
american <- MakeMap('tradamerican')
american
shiny::runApp('~/Documents/2016-2017/S'17/INFO 201A/info-201-git-R-done')
setwd("~/Documents/2016-2017/S'17/INFO 201A/info-201-git-R-done")
shiny::runApp()
install.packages('shinythemes')
runApp()
install.packages('wordcloud')
install.packages('SnowballC')
runApp()
runApp()
library(httr)
library(purrr)
library(jsonlite)
library(dplyr)
library(plotly)
library(stringr)
MakeMap <- function(food.type.input) {
pop.city.US <- read.csv(file = './scripts/most-pop-cities.csv', stringsAsFactors = FALSE)
most.pop.city <- pop.city.US$most.pop.city
AvgRating <- function(food.type, city) {
res <- POST("https://api.yelp.com/oauth2/token",
body = list(grant_type = "client_credentials",
client_id = "iXvoLjOm6wir50Rq0XrwZg",
client_secret =
"2jifA0p0BWQROgO6Kmarl9bBc6WFwLH3r8SP9fzFmbrHkq98suQRgAP3OoBduC4u"))
token <- httr::content(res)$access_token
yelp <- "https://api.yelp.com"
location <- city
limit <- 10
offset <- 0
categories <- food.type
(url <- modify_url(yelp, path = c("v3", "businesses", "search"),
query = list(location = location, categories = categories, limit = limit, offset = 0)))
res <- GET(url, add_headers('Authorization' = paste("bearer", token)))
response.content <- httr::content(res, "text", encoding = "UTF-8")
body.data <- fromJSON(response.content)
test <- is.data.frame(body.data$businesses)
results <- body.data$businesses
results.info <- results %>% select(name, rating)
results.name <- results.info$name
results.rating <- results.info$rating
total.results <- data.frame(results.name, results.rating, stringsAsFactors = FALSE)
most.pop.city <- city
mean.rating <- mean(results.rating)
output <- data.frame(most.pop.city, mean.rating, stringsAsFactors = FALSE)
pop.city.US <- merge(pop.city.US, output, all = TRUE)
return (pop.city.US)
}
list.df.ratings <- lapply(most.pop.city, AvgRating, food.type=food.type.input)
all.ratings <- reduce(list.df.ratings, full_join, by = c('most.pop.city','states', 'lat', 'long', 'mean.rating')) %>%
filter(!is.na(mean.rating))
title.food <- food.type.input
if (food.type.input == 'indpak') {
title.food <- 'Indian'
} else if (food.type.input == 'tradamerican') {
title.food <- 'American (Traditional)'
}
geog <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5
)
map <- plot_geo(all.ratings, locationmode= 'USA-states',lat = ~lat, lon = ~long)  %>%
add_markers(
z = ~mean.rating, locations = ~states,
text = ~paste('Most populated city:', most.pop.city,
paste('Rating:', round(mean.rating, digits = 2)),
sep = '<br />'),
color = ~mean.rating,
hoverinfo = 'text'
) %>%
layout(
title = paste0("Average Rating of ", str_to_title(title.food), " Restaurants in the U.S."),
geo = geog
)
return (map)
}
# don't work
# indian = 'indpak'
# american traditional = 'tradamerican'
# korean
# thai
# german
runApp()
runApp()
